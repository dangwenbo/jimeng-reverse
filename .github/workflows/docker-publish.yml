name: Docker Publish

on:
  # Tag push：仅预热缓存，不推镜像
  push:
    tags: ['v*.*.*']
  # Release：才推 latest + vX.Y.Z
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # 将在步骤中强制转小写

jobs:
  # 1) Tag push：构建但不推送（预热缓存）
  build-cache-on-tag:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Force IMAGE_NAME lowercase (GHCR requires lowercase)
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"

      - uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx (pin BuildKit version)
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.25.1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (no push, warm cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 2) Release published：推送 latest + vX.Y.Z（同一构建 -> 同 digest）
  build-and-push-on-release:
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Force IMAGE_NAME lowercase (GHCR requires lowercase)
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"

      - uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx (pin BuildKit version)
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.25.1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 注意：此多行块内不要写注释（# 会被当作规则文本）
      - name: Docker metadata (latest only on Release)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'release' && github.event.action == 'published' }}
            type=semver,pattern={{version}},enable={{is_semver}}
            type=semver,pattern={{major}}.{{minor}},enable={{is_semver}}
            type=semver,pattern={{major}},enable={{is_semver}}

      - name: Compute VERSION
        id: version
        run: |
          V="${{ steps.meta.outputs.version }}"
          if [ -z "$V" ]; then V="${{ github.event.release.tag_name }}"; fi
          echo "VALUE=$V" >> "$GITHUB_OUTPUT"

      - name: Build and push (Release)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.version.outputs.VALUE }}
