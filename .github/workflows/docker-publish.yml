name: Docker Publish

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Force IMAGE_NAME lowercase (GHCR requires lowercase)
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false   # 关闭默认 latest，避免 tag/semver 事件自动生成
          tags: |
            # 仅在发布 Release 时生成 latest
            type=raw,value=latest,enable=${{ github.event_name == 'release' && github.event.action == 'published' }}
            # 语义化版本标签（无需 enable；仅在有效 semver tag 上才会生效）
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # 实际的标签名（仅在 tag 事件）
            type=ref,event=tag
            
      - name: Compute VERSION
        id: version
        run: |
          V="${{ steps.meta.outputs.version }}"
          if [ -z "$V" ]; then V="${{ github.ref_name }}"; fi
          echo "VALUE=$V" >> "$GITHUB_OUTPUT"

      - name: Build and (conditionally) push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/') }}  # 仅在打 tag 时推
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.version.outputs.VALUE }}
